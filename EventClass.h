#ifndef EASYTRIP_EVENTCLASS_H#define EASYTRIP_EVENTCLASS_H#include "TimeClass.h"#include "PassengerClass.h"#include "BusClass.h"#include "FileHandler.h"#include "Queue.h"class Event {public:    virtual ~Event() = default;    Event(TimeClass eventTime, PassengerClass* P, CompanyClass* C);    void setCompany(CompanyClass* company);    void setPassenger(PassengerClass* passenger);    void setEventQueue(Queue<std::vector<std::string>> eventQueue);    void setFile(std::string filename);    CompanyClass * getCompany();    PassengerClass * getPassenger();    Queue<std::vector<std::string>> getEventQueue();    std::string getFile();    virtual void execute() = 0;bool processEvent(TimeClass Time, CompanyClass* company, Queue<std::vector<std::string>> eventQueue);protected:    TimeClass eventTime;    PassengerClass* P;    CompanyClass* C;    Queue<std::vector<std::string>> eventQueue;    std::string file;};class ArriveEvent : public Event {public:    ArriveEvent(TimeClass ArrivalTime, PassengerClass* P, CompanyClass* C);    void execute() override;};class LeaveEvent : public Event {public:    LeaveEvent(TimeClass LeaveTime, PassengerClass* P, CompanyClass* C);    void execute() override;};class EventManager {    CompanyClass * company;    Queue<std::vector<std::string>>  eventQueue;public:    EventManager(CompanyClass * company,Queue<std::vector<std::string>>  eventQueue);    bool processEvents(TimeClass Time);};#endif //EASYTRIP_EVENTCLASS_H